{"version":3,"sources":["redux/actions/actionTypes.js","api.js","redux/actions/app.js","components/error-boundary/error-boundary.js","util/util.js","components/topics/topics.js","components/posts/posts.js","components/search/search.js","components/app/App.js","redux/reducers/app.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["FETCH_TOPICS","Object","freeze","INITIAL","SUCCESS","FAILURE","FETCH_POSTS","SEARCH_TOPICS","APP","SET_ERROR","SET_SHOWING_POSTS","SET_CURRENT_TOPIC","getJSON","url","a","fetch","res","json","fetchPosts","topic","fetchPostSuccess","data","children","map","child","type","fetchTopicSuccess","topics","searchTopicSuccess","setError","err","setShowPosts","isShowingPosts","getPosts","dispatch","ErrorBoundary","props","state","hasError","error","errorInfo","this","className","icon","IconNames","ERROR","intent","Intent","DANGER","React","Component","uppercase","str","length","slice","toUpperCase","prettifyTitle","split","join","trim","Topic","display_name_prefixed","title","display_name","icon_img","style","backgroundImage","renderIcon","banner","banner_background_image","banner_background_color","header_img","backgroundSize","backgroundColor","renderBanner","onClick","Topics","displayTitle","topicElements","key","name","Post","created","author","ups","timeAgo","date_1","date_2","finalLabel","maxToLabel","diff","Math","abs","lessThanMax","entry","i","filter","max","finalNum","shift","label","floor","formatDateDiff","Date","thumbnail","RegExp","test","renderThumbnail","href","target","THUMBS_UP","toLocaleString","Posts","posts","window","scrollTo","postElements","post","handleClick","CHEVRON_LEFT","Search","setInputVal","handleOnKeyDown","firstSearch","inputRef","useRef","useState","placeholder","setPlaceholder","inputVal","setInputValLocal","searchContainerRef","handleOnClick","current","focus","ref","SEARCH","SMALL_CROSS","value","spellCheck","onChange","e","onKeyDown","connect","appState","app","currentTopic","isPopularTopic","setIsPopularTopic","useEffect","getTopicsLocal","has","wrapper","then","searchTopicsReducerLocal","input","memoizedRenderTopicsOrPosts","useMemo","get","searchProps","keyCode","console","log","INITIAL_STATE","Map","inProgress","updatePosts","oldPosts","newPosts","cloneDeep","set","combineReducers","prevState","action","middleware","applyMiddleware","logger","thunk","createStore","finalReducer","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.e7039e33.chunk.js","sourcesContent":["export const FETCH_TOPICS = Object.freeze({\r\n    INITIAL: \"FETCH_TOPICS_INITIAL\",\r\n    SUCCESS: \"FETCH_TOPICS_SUCCESS\",\r\n    FAILURE: \"FETCH_TOPICS_FAILURE\"\r\n});\r\n\r\nexport const FETCH_POSTS = Object.freeze({\r\n    INITIAL: \"FETCH_POSTS_INITIAL\",\r\n    SUCCESS: \"FETCH_POSTS_SUCCESS\",\r\n    FAILURE: \"FETCH_POSTS_FAILURE\"\r\n});\r\n\r\nexport const SEARCH_TOPICS = Object.freeze({\r\n    INITIAL: \"SEARCH_TOPICS_INITIAL\",\r\n    SUCCESS: \"SEARCH_TOPICS_SUCCESS\",\r\n    FAILURE: \"SEARCH_TOPICS_FAILURE\"\r\n});\r\n\r\nexport const APP = Object.freeze({\r\n   SET_ERROR: \"APP_SET_ERROR\",\r\n   SET_SHOWING_POSTS: \"APP_SET_SHOWING_POSTS\",\r\n   SET_CURRENT_TOPIC: \"APP_SET_CURRENT_TOPIC\"\r\n});","/**\r\n * @param url - the url to fetch\r\n * @returns {Promise<any>}\r\n * @desc A utility function for fetching the JSON\r\n * response from an endpoint.\r\n */\r\nasync function getJSON(url) {\r\n    try {\r\n        const res = await fetch(url);\r\n        return await res.json();\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport function fetchTopics() {\r\n    const url = \"https://www.reddit.com/subreddits/popular.json?raw_json=1\";\r\n    return getJSON(url);\r\n}\r\n\r\nexport function fetchPosts(topic) {\r\n    const url = `https://www.reddit.com/r/${topic}/hot.json`;\r\n    return getJSON(url);\r\n}\r\n\r\nexport function searchTopics(topic) {\r\n    const url = `https://www.reddit.com/subreddits/search.json?q=${topic}`;\r\n    return getJSON(url);\r\n}","import {FETCH_POSTS, FETCH_TOPICS, APP, SEARCH_TOPICS} from \"./actionTypes\";\r\nimport {fetchPosts, fetchTopics, searchTopics} from \"../../api\";\r\n\r\nfunction fetchPostInitial() {\r\n    return {\r\n        type: FETCH_POSTS.INITIAL\r\n    };\r\n}\r\n\r\nfunction fetchPostSuccess(topic,data) {\r\n    data = data.data.children.map(child => child.data);\r\n    return {\r\n        type: FETCH_POSTS.SUCCESS,\r\n        topic,\r\n        data\r\n    };\r\n}\r\n\r\nfunction fetchPostFailure(err) {\r\n    return {\r\n        type: FETCH_POSTS.FAILURE,\r\n        err\r\n    };\r\n}\r\n\r\nfunction fetchTopicInitial() {\r\n    return {\r\n        type: FETCH_TOPICS.INITIAL\r\n    };\r\n}\r\n\r\nfunction fetchTopicSuccess(data) {\r\n    const topics = data.data.children.map(child => child.data);\r\n    return {\r\n        type: FETCH_TOPICS.SUCCESS,\r\n        topics\r\n    };\r\n}\r\n\r\nfunction fetchTopicFailure(err) {\r\n    return {\r\n        type: FETCH_TOPICS.FAILURE,\r\n        err\r\n    };\r\n}\r\n\r\nfunction searchTopicInitial() {\r\n    return {\r\n        type: SEARCH_TOPICS.INITIAL\r\n    };\r\n}\r\n\r\nfunction searchTopicSuccess(data) {\r\n    const topics = data.data.children.map(child => child.data);\r\n    return {\r\n        type: SEARCH_TOPICS.SUCCESS,\r\n        topics\r\n    };\r\n}\r\n\r\nfunction searchTopicFailure(err) {\r\n    return {\r\n        type: SEARCH_TOPICS.FAILURE,\r\n        err\r\n    };\r\n}\r\n\r\nexport function setError(err) {\r\n    return {\r\n        type: APP.SET_ERROR,\r\n        err\r\n    }\r\n}\r\n\r\nexport function setShowPosts(isShowingPosts) {\r\n    return {\r\n        type: APP.SET_SHOWING_POSTS,\r\n        isShowingPosts\r\n    }\r\n}\r\n\r\nexport function setCurrentTopic(topic) {\r\n    return {\r\n        type: APP.SET_CURRENT_TOPIC,\r\n        topic\r\n    }\r\n}\r\n\r\nexport function getTopics() {\r\n    return async (dispatch) => {\r\n        dispatch(fetchTopicInitial());\r\n        try {\r\n            const res = await fetchTopics();\r\n            dispatch(fetchTopicSuccess(res));\r\n        } catch (e) {\r\n            dispatch(fetchTopicFailure(e));\r\n        }\r\n    };\r\n}\r\n\r\n/**\r\n * @param topic\r\n * @returns {function(...[*]=)}\r\n */\r\nexport function getPosts(topic) {\r\n    return async (dispatch) => {\r\n        dispatch(fetchPostInitial());\r\n        try {\r\n            const data = await fetchPosts(topic);\r\n            dispatch(fetchPostSuccess(topic, data));\r\n        } catch (e) {\r\n            dispatch(fetchPostFailure(e));\r\n        }\r\n    };\r\n}\r\n\r\nexport function searchTopicsReducer(input) {\r\n    return async (dispatch) => {\r\n        dispatch(searchTopicInitial());\r\n        try {\r\n            const res = await searchTopics(input);\r\n            dispatch(searchTopicSuccess(res));\r\n        } catch (e) {\r\n            dispatch(searchTopicFailure(e));\r\n        }\r\n    };\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {setError} from \"../../redux/actions/app\";\r\nimport { Icon, Intent} from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport './error-boundary.scss';\r\n\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {hasError: false};\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        // Update state so the next render will show the fallback UI.\r\n        return { hasError: true };\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.props.dispatch(setError({error,errorInfo}));\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError || this.props.hasError) {\r\n            return (\r\n                <main className={\"error-boundary\"}>\r\n                    <div className={\"message\"}>\r\n                        <Icon icon={IconNames.ERROR} intent={Intent.DANGER}/>\r\n                        <h1>Sorry, something went wrong.</h1>\r\n                        <h2>Please try again later.</h2>\r\n                    </div>\r\n                </main>\r\n            );\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nErrorBoundary.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    hasError: PropTypes.bool\r\n};\r\nexport default ErrorBoundary;","/**\r\n * @param {number} date_1 - a date in ms since January 1st, 1970\r\n * @param {number} date_2 - a date in ms since January 1st, 1970\r\n * Calculates the difference between two dates and returns\r\n * a string of the highest whole integer difference in seconds,\r\n * minutes, hours, days, weeks, months, or years.\r\n */\r\nexport const formatDateDiff = (date_1, date_2) => {\r\n    const maxToLabel = [\r\n        [60, 'second'],\r\n        [3600, 'minute'],\r\n        [86400, 'hour'],\r\n        [604800, 'day'],\r\n        [2592000, 'week'],\r\n        [31557600, 'month']\r\n    ];\r\n    const diff = (Math.abs(date_1 - date_2)/1000) + 1; // ms to seconds\r\n    const lessThanMax = maxToLabel.map((entry, i) => {\r\n        return {entry, i}\r\n    }).filter(({entry: [max, label]}) => diff < max);\r\n\r\n    let finalNum = diff;\r\n    let finalLabel;\r\n    if (lessThanMax.length) {\r\n        const {entry: [max, label], i} = lessThanMax.shift();\r\n        finalLabel = label;\r\n        if (i > 0) finalNum = diff/maxToLabel[i-1][0];\r\n    } else {\r\n        finalNum = diff/31557600;\r\n        finalLabel = 'year';\r\n    }\r\n    finalNum = Math.floor(finalNum);\r\n    return `${finalNum} ${finalLabel}${finalNum > 1 ? 's' : ''}`\r\n};\r\n\r\nfunction uppercase(str) {\r\n    if (str.length) {\r\n        return str.slice(0,1).toUpperCase() + str.slice(1);\r\n    }\r\n    return str;\r\n}\r\n\r\nexport function prettifyTitle(str) {\r\n    return str.split(\"_\").map(uppercase).join(\" \").trim();\r\n}","import React from 'react';\r\nimport {setCurrentTopic, setShowPosts} from \"../../redux/actions/app\";\r\nimport {prettifyTitle} from '../../util/util';\r\nimport './topics.scss';\r\n\r\n/**\r\n * @param topics\r\n * @param dispatch\r\n * @param displayTitle {string}\r\n * @desc A non-connected component for displaying a list of topics.\r\n */\r\nfunction Topics({topics, displayTitle, dispatch}) {\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    const topicElements = topics.map(data => <Topic data={data} key={data.name} dispatch={dispatch}/>);\r\n    displayTitle = prettifyTitle(displayTitle);\r\n    return (\r\n        <>\r\n            <h1>{displayTitle} Topics</h1>\r\n            <div className={\"topics\"}>\r\n              {topicElements}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n/**\r\n * @param data\r\n * @param dispatch\r\n * @desc A helper component for displaying a single topic.\r\n *  Features:\r\n *  - renders a banner image if it exists\r\n *  - displays title\r\n *  - displays author icon and prefixed \"r/<name>\"\r\n */\r\nfunction Topic({data, dispatch}) {\r\n\r\n    // GLOBAL VARIABLES ------------------------------------------------------------------------------------------------\r\n\r\n    const {display_name_prefixed, title, display_name} = data;\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n\r\n    const handleClick = () => {\r\n        dispatch(setCurrentTopic(display_name));\r\n        dispatch(setShowPosts(true));\r\n    };\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param data\r\n     * @desc If icon image exists, display it,\r\n     * else, return null.\r\n     */\r\n    function renderIcon(data) {\r\n        const {icon_img} = data;\r\n        if (icon_img) {\r\n            const style = {\r\n                backgroundImage: `url(${icon_img})`\r\n            };\r\n\r\n            return (<div className={\"topic-icon\"} style={style}/>);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * @param data\r\n     * @desc If the header or banner image exists,\r\n     * display it, else return null.\r\n     */\r\n    function renderBanner(data) {\r\n        const {banner_background_image, banner_background_color, header_img} = data;\r\n        const style = {};\r\n        if (header_img) { // select an image to display\r\n            style.backgroundImage = `url(${header_img})`;\r\n            style.backgroundSize = \"contain\";\r\n        } else if (banner_background_image) {\r\n            style.backgroundImage = `url(${banner_background_image})`;\r\n            style.backgroundSize = \"cover\";\r\n        }\r\n        if (banner_background_color) { // update bg-color if it exists\r\n            style.backgroundColor = banner_background_color;\r\n        }\r\n        return (<div className={\"banner\"} style={style}/>);\r\n    }\r\n\r\n    const icon = renderIcon(data);\r\n    const banner = renderBanner(data);\r\n\r\n    return (\r\n        <div className={\"topic\"} onClick={handleClick}>\r\n            {banner}\r\n            <div className={\"description\"}>\r\n                <div className={\"title\"}>{title}</div>\r\n                <div className={\"author\"}>\r\n                    {icon}\r\n                    <div className={\"display-name-prefixed\"}>{display_name_prefixed}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Topics;","import React from 'react';\r\nimport { Icon } from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport {setShowPosts} from \"../../redux/actions/app\";\r\nimport {formatDateDiff, prettifyTitle} from \"../../util/util\";\r\nimport './posts.scss';\r\n\r\n/**\r\n * @param posts\r\n * @param topic\r\n * @param dispatch\r\n * @desc A wrapper component for a list of posts.\r\n */\r\nfunction Posts({posts, topic, dispatch}) {\r\n    window.scrollTo(0,0);\r\n\r\n    // GLOBAL VARIABLES ------------------------------------------------------------------------------------------------\r\n\r\n    const postElements = posts.map(post => <Post data={post} key={post.name}/>);\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n\r\n    const handleClick = async () => {\r\n      await dispatch(setShowPosts(false));\r\n      window.scrollTo(0,0);\r\n    };\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    return (\r\n        <>\r\n            <h1>{prettifyTitle(topic)}</h1>\r\n            <div className={'posts'}>\r\n                <nav>\r\n                    <span className={`back-icon`} onClick={handleClick}>\r\n                       <Icon icon={IconNames.CHEVRON_LEFT}/>\r\n                    </span>\r\n                </nav>\r\n                {postElements}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\n/**\r\n * @param data\r\n * @desc A helper component for displaying a single post.\r\n * Features:\r\n *  - displays thumbnail if it exists\r\n *  - displays title, author, and time since post was created\r\n *  - displays amount of \"ups\"\r\n */\r\nfunction Post({data}) {\r\n\r\n    // GLOBAL VARIABLES ------------------------------------------------------------------------------------------------\r\n\r\n    const {title, url, created, author, ups} = data;\r\n    const timeAgo = formatDateDiff(created*1000, +(new Date()));\r\n\r\n    // COMPONENTS ------------------------------------------------------------------------------------------------------\r\n\r\n    function renderThumbnail(data) {\r\n        const {thumbnail} = data;\r\n        if (thumbnail && RegExp('http*', 'gi').test(thumbnail)) {\r\n            return (<div className={'thumbnail'} style={{backgroundImage: `url(${thumbnail})`}}/>);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    const thumbnail = renderThumbnail(data);\r\n    return (\r\n        <a href={url} target={'_blank'}>\r\n            <div className={\"post\"}>\r\n                {thumbnail}\r\n                <div className={\"text\"}>\r\n                    <h1 className={\"title\"}>{title}</h1>\r\n                    <div className={\"user-metadata\"}>\r\n                        {`Posted by ${author} ${timeAgo} ago`}\r\n                    </div>\r\n                    <div className={\"ups\"}>\r\n                        <Icon icon={IconNames.THUMBS_UP}/>\r\n                        <div className={\"amount\"}>\r\n                            {ups.toLocaleString() || 0}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default Posts;","import React, {useState, useEffect, useRef} from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport {Icon} from \"@blueprintjs/core\";\r\nimport { IconNames } from \"@blueprintjs/icons\";\r\nimport {setError} from \"../../redux/actions/app\";\r\nimport './search.scss';\r\n\r\n/**\r\n * @param items {[]} - the items to make searchable and selectable\r\n * @param firstSearch {boolean} - whether the first search is completed\r\n * @param dispatch {function}\r\n * @desc A search bar component for selecting a type of breed.\r\n *\r\n * Features:\r\n *  - displays an option dialog on input focus\r\n *  - allow dialog search on Arrow keys (up & down)\r\n *  - allow option selection on click and Enter key\r\n */\r\nfunction Search({setInputVal, handleOnKeyDown, firstSearch, dispatch}) {\r\n\r\n    // CONSTANTS -------------------------------------------------------------------------------------------------------\r\n\r\n    const INITIAL_PLACEHOLDER = \"Search a subreddit\";\r\n    const inputRef = useRef(null);\r\n\r\n    // COMPONENT STATE -------------------------------------------------------------------------------------------------\r\n\r\n    const [placeholder, setPlaceholder] = useState(INITIAL_PLACEHOLDER);\r\n    const [inputVal, setInputValLocal] = useState('');\r\n\r\n    // ELEMENT REFS ----------------------------------------------------------------------------------------------------\r\n\r\n    const searchContainerRef = useRef(null);\r\n\r\n    // HANDLERS --------------------------------------------------------------------------------------------------------\r\n\r\n    /**\r\n     * @param e\r\n     * @desc A change handler for updating\r\n     * the appropriate states on input change.\r\n     */\r\n    const handleOnChange = e => {\r\n        try {\r\n            setInputVal(e.target.value);\r\n            setInputValLocal(e.target.value);\r\n            if (!e.target.value) setPlaceholder(INITIAL_PLACEHOLDER);\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @desc A click handler for clearing\r\n     * the search bar.\r\n     */\r\n    const handleOnClick = () => {\r\n        try {\r\n            setInputValLocal('');\r\n            inputRef.current.focus();\r\n        } catch (err) {\r\n            dispatch(setError(err));\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @desc Renders a button to clear\r\n     * the search container.\r\n     */\r\n    const renderCloseButton = () => {\r\n        if (inputVal) {\r\n            return (\r\n                <span onClick={handleOnClick}>\r\n                      <Icon className={\"close-btn\"} icon={IconNames.SMALL_CROSS}/>\r\n                </span>\r\n            );\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return (\r\n        <div\r\n            className={\"search-container\"}\r\n            style={{'width': (firstSearch ? '50%' : \"80%\")}}\r\n            ref={searchContainerRef}>\r\n            <Icon className=\"search-btn\" icon={IconNames.SEARCH}/>\r\n            {renderCloseButton()}\r\n            <input\r\n                type=\"text\"\r\n                value={inputVal}\r\n                spellCheck={false}\r\n                onChange={handleOnChange}\r\n                onKeyDown={handleOnKeyDown}\r\n                placeholder={placeholder}\r\n                ref={inputRef}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nSearch.propTypes = {\r\n    handleValueChange: PropTypes.func,\r\n    firstSearch: PropTypes.bool,\r\n    dispatch: PropTypes.func\r\n};\r\n\r\nexport default Search;\r\n","import React, {useEffect, useState, useMemo} from 'react';\nimport {connect} from 'react-redux';\nimport {getTopics, getPosts, searchTopicsReducer, setShowPosts} from \"../../redux/actions/app\";\nimport ErrorBoundary from \"../error-boundary/error-boundary\";\nimport Topics from \"../topics/topics\";\nimport Posts from \"../posts/posts\";\nimport Search from '../search/search';\nimport './App.scss';\n\n/**\n * @param appState\n * @param dispatch\n * @desc The top level app component.\n *  Main responsibilities:\n *  - displays posts or topics\n *  - displays error page\n */\nfunction App({appState, dispatch}) {\n\n  // GLOBAL VARIABLES --------------------------------------------------------------------------------------------------\n\n  const {hasError, topics, currentTopic, isShowingPosts, posts} = appState;\n  const [isPopularTopic, setIsPopularTopic] = useState(true);\n  const [inputVal, setInputVal] = useState('');\n\n  // SIDE EFFECTS ------------------------------------------------------------------------------------------------------\n\n  /**\n   * @desc Dispatch an action to the store\n   * to obtain the (popular) topics once.\n   */\n  useEffect(() => {\n    getTopicsLocal();\n  }, []);\n\n  /**\n   * @desc Whenever current topic changes\n   * and the topic is not in the posts map,\n   * dispatch a get post action.\n   */\n  useEffect(() => {\n    const wrapper = async() => {\n      if (!posts.has(currentTopic)) {\n        await dispatch(getPosts(currentTopic));\n      }\n      window.scrollTo(0,0);\n    };\n    wrapper().then();\n  }, [currentTopic]);\n\n  // COMPONENTS --------------------------------------------------------------------------------------------------------\n\n  const renderTopicsOrPosts = () => {\n    const displayTitle = isPopularTopic ? \"Popular\" : inputVal;\n    if (isShowingPosts && currentTopic && posts.has(currentTopic)) {\n      return (<Posts posts={posts.get(currentTopic)} topic={currentTopic} dispatch={dispatch}/>);\n    }\n    return (<Topics topics={topics} dispatch={dispatch} displayTitle={displayTitle}/>);\n  };\n\n  const getTopicsLocal = () => {\n    dispatch(getTopics());\n    setIsPopularTopic(true);\n    dispatch(setShowPosts(false));\n  };\n\n  const searchTopicsReducerLocal = value => {\n    dispatch(searchTopicsReducer(value));\n    setIsPopularTopic(false);\n    dispatch(setShowPosts(false));\n  };\n\n  /**\n   * @desc Memoize the function so change in\n   * inputVal doesn't trigger component change.\n   */\n  const memoizedRenderTopicsOrPosts = useMemo(renderTopicsOrPosts, [topics, posts, isShowingPosts]);\n\n  const handleOnKeyDown = e => {\n    const {keyCode} = e;\n    try {\n      const {value} = e.target;\n      if (keyCode === 13) {\n        if (value) {\n          searchTopicsReducerLocal(value);\n        } else {\n          getTopicsLocal();\n        }\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n\n  const searchProps = {\n    handleOnKeyDown,\n    firstSearch: true,\n    dispatch,\n    setInputVal\n  };\n\n  return (\n    <ErrorBoundary hasError={hasError} dispatch={dispatch}>\n      <main className={\"app\"}>\n        <Search {...searchProps} />\n        {memoizedRenderTopicsOrPosts}\n      </main>\n    </ErrorBoundary>\n  );\n}\n\nconst mapStateToProps = state => ({\n  appState: state.app\n});\n\nexport default connect(mapStateToProps)(App);\n","import {FETCH_POSTS, FETCH_TOPICS, APP, SEARCH_TOPICS} from \"../actions/actionTypes\";\r\nimport {cloneDeep} from 'lodash';\r\n\r\nconst INITIAL_STATE = {\r\n    topics: [],\r\n    posts: new Map(),\r\n    isShowingPosts: false,\r\n    currentTopic: null,\r\n    inProgress: false,\r\n    error: null,\r\n    hasError: false\r\n};\r\n\r\nexport default (prevState = INITIAL_STATE, action) => {\r\n    let {posts} = prevState;\r\n    switch(action.type) {\r\n        case FETCH_POSTS.INITIAL:\r\n        case FETCH_TOPICS.INITIAL:\r\n        case SEARCH_TOPICS.INITIAL:\r\n            return {\r\n                ...prevState,\r\n                error: null,\r\n                inProgress: true,\r\n                hasError: false\r\n            };\r\n        case FETCH_POSTS.SUCCESS:\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                posts: updatePosts(posts, action.topic, action.data)\r\n            };\r\n        case FETCH_TOPICS.SUCCESS:\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                topics: action.topics\r\n            };\r\n        case SEARCH_TOPICS.SUCCESS:\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                topics: action.topics\r\n            };\r\n        case FETCH_POSTS.FAILURE:\r\n        case FETCH_TOPICS.FAILURE:\r\n        case SEARCH_TOPICS.FAILURE:\r\n            return {\r\n                ...prevState,\r\n                inProgress: false,\r\n                error: action.err,\r\n                hasError: true\r\n            };\r\n        case APP.SET_ERROR:\r\n            return {\r\n                ...prevState,\r\n                hasError: true,\r\n                error: action.err\r\n            };\r\n        case APP.SET_SHOWING_POSTS:\r\n            return {\r\n                ...prevState,\r\n                isShowingPosts: action.isShowingPosts\r\n            };\r\n        case APP.SET_CURRENT_TOPIC:\r\n            return {\r\n                ...prevState,\r\n                currentTopic: action.topic\r\n            };\r\n        default:\r\n            return prevState;\r\n    }\r\n}\r\n\r\nfunction updatePosts(oldPosts,topic,data) {\r\n    const newPosts = cloneDeep(oldPosts);\r\n    newPosts.set(topic,data);\r\n    return newPosts;\r\n}","import {combineReducers} from \"redux\";\r\nimport app from \"./app\";\r\n\r\nexport default combineReducers({app});","import {createStore, applyMiddleware} from 'redux';\r\nimport logger from 'redux-logger';\r\nimport thunk from \"redux-thunk\";\r\nimport finalReducer from './reducers/index';\r\n\r\n// todo: remove logger in production\r\nconst middleware = applyMiddleware(logger,thunk);\r\n\r\nexport default createStore(finalReducer, middleware);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Provider} from 'react-redux';\nimport App from './components/app/App';\nimport store from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n"],"sourceRoot":""}